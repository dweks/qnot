databases :: views are preaggregated data only relevant to project

+sqlite vs postgresql:
sqlite - serverless, self-contained (embedded database)
postgresql - more extensible and standard compliance (object-relational db)
    good for concurrency
    developed for two goals
    - allow addition of new functionality and capabilities
    - achieve standards compliance

diffs: 
sqlite serverless, can run within apps, postresql uses client-server model, requires db server to setup and run on network
sqlite has 5 datatypes
psql can store nearly any datatype
sqlite is portable, uses regular disk file in any location within app directory (and is cross-platform)
psql must export db to file then upload to server, not as portable
sqlite has bad user management and concurrent access by multiple users
psql has well defined permissions for users, supports concurrent access
sqlite very simple, has basic features suitable for all
psql complex but can do more
sqlite is very fast and lightweight
psql not necessarily suitable for fast reads. it is more complex and 'heavy' but powerful when it comes to complex ops
sqlite does not have auth, anyone who can access db can read and update - not good for private data
psql has many sec feats and requires configs to make secure

limitations sqlite
- concurrency restrictions: can only run single proc at time
- not good user management, relies on access control system of underlying OS
- bad security: no auth 

limitations psql
- bad mem performance, since supports concurrency, reserves about 10MB of RAM for each new client connection
- very complex, harder to use for less experienced database admins

// how to choose database
consider extended downtime, speed, customer impact, etc