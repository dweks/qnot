mvc :: supports separation of concerns
design pattern not a framework
    both solve software architecture problem
    -diff
        dp: solves many soft arch issues (creation, behavior, concurrency with *design*
        fw: implement high level reqs as specified and let framework do the rest, using your implementations
        **scope cohesion
            dp has tight scope
            - class design patterns
            -biz design patterns
            -app design patterns
            fw has large scope
                ex .NET

client sends req to server, server sends req to db, db resp to server, server resp to client
client is view, server is controller, db is model

model:
 interacts with db
 uses data logic
 communicates with controller

view:
    UI
    data presentation
    usually html css js

controller
    interacts with user
    processes reqs
    gets data from model
    pass data to view

router
    code logic determines with controller to route to
    ex
        search for 'cats', router sends req to appropriate controller and so on